package taller

import org.scalatest.funsuite.AnyFunSuite
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class TorresHanoiTest extends AnyFunSuite {
    val torresHanoi = new TorresHanoi(3)

    test("Secuencia de movimientos para 3 discos") {
        assert(torresHanoi.torresHanoi(3, 1, 2, 3) == List((1, 3), (1, 2), (3, 2), (1, 3), (2, 1), (2, 3), (1, 3)))
    }

    test("Secuencia de movimientos para 4 discos") {
        val expectedMovements = List((1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2),
        (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3))
        assert(torresHanoi.torresHanoi(4, 1, 2, 3) == expectedMovements)
    }

    test("Secuencia de movimientos para 5 discos") {
        val expectedMovements = List((1, 3), (1, 2), (3, 2), (1, 3), (2, 1), (2, 3), (1, 3),
            (1, 2), (3, 2), (3, 1), (2, 1), (3, 2), (1, 3), (1, 2), (3, 2),
            (1, 3), (2, 1), (2, 3), (1, 3), (2, 1), (3, 2), (3, 1), (2, 1),
            (2, 3), (1, 3), (1, 2), (3, 2), (1, 3), (2, 1), (2, 3), (1, 3)
        )
        assert(torresHanoi.torresHanoi(5, 1, 2, 3) == expectedMovements)
    }


    test("Secuencia de movimientos para 6 discos") {
        val expectedMovements = List((1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), 
        (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), 
        (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), 
        (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), 
        (1, 3), (2, 3), (2, 1), (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), 
        (2, 3), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), 
        (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3))
        assert(torresHanoi.torresHanoi(6, 1, 2, 3) == expectedMovements)
    }

    test("Secuencia de movimientos para 8 discos") {
        val expectedMovements = List((1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), 
        (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), 
        (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), 
        (3, 2), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), (2, 1), 
        (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), 
        (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), 
        (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (3, 2), (1, 2), 
        (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (2, 3), 
        (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), 
        (3, 2), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (2, 1), 
        (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), 
        (2, 1), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), 
        (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (3, 2), (1, 2), 
        (3, 1), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), 
        (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), 
        (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (1, 2), 
        (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), 
        (2, 1), (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), 
        (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), 
        (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), (3, 1), (3, 2), 
        (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), 
        (2, 3), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (3, 2), (1, 2), (3, 1), (2, 3), (2, 1), 
        (3, 1), (2, 3), (1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), 
        (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3))
        assert(torresHanoi.torresHanoi(8, 1, 2, 3) == expectedMovements)
    }

}